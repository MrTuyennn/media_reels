package com.example.media_reels.ImagePickerimport android.app.Activityimport android.content.Contextimport android.content.Intentimport android.content.pm.PackageManagerimport android.os.Buildimport android.widget.Toastimport androidx.activity.result.contract.ActivityResultContractsimport androidx.core.app.ActivityCompatimport androidx.core.content.ContextCompatimport io.flutter.plugin.common.BinaryMessengerimport io.flutter.plugin.common.MethodChannelclass ImagePicker(private val activity: Activity, private val binaryMessenger: BinaryMessenger) {    private lateinit var methodChannelResult: MethodChannel.Result    val methodChannel = MethodChannel(binaryMessenger, "iamgePickerPlatform")    init {        methodChannel.setMethodCallHandler { call, result ->            methodChannelResult = result            when (call.method) {                "pickImage" -> {                    if (Build.VERSION.SDK_INT >= 30) {                        lauchNewPhotoPicker()                    } else {                        if (allPermissionsGranted()) {                            lauchOldPhotoPicker()                        } else {                            ActivityCompat.requestPermissions(                                activity,                                REQUIRED_PERMISSIONS, REQUEST_CODE_PERMISSIONS                            )                        }                    }                }                else -> {                    result.notImplemented()                }            }        }    }    private fun allPermissionsGranted() = REQUIRED_PERMISSIONS.all {      ContextCompat.checkSelfPermission(          activity,it      ) == PackageManager.PERMISSION_GRANTED    }    override fun onRequestPermissionResult(        requestCode: Int, permissions: Array<String>,grantResults: IntArray    ) {        super.onRequestPermissionResult(requestCode, permissions, grantResults)        if (requestCode == REQUEST_CODE_PERMISSIONS) {            if (allPermissionsGranted()) {                lauchOldPhotoPicker()            } else {                Toast.makeText(activity,"Permission not granted by the user.",Toast.LENGTH_SHORT).show()                finish()            }        }    }    companion object {        private const val REQUEST_CODE_PERMISSIONS = 10        private val REQUIRED_PERMISSIONS = mutableMapOf(android.Manifest.permission.READ_EXTERNAL_STORAGE to 1).keys.toTypedArray()    }    private val newPhotoPicker = registerForActivityResult(ActivityResultContracts.PickVisualMedia()) { uri:String ->        methodChannelResult.success(uri)    }    private fun lauchNewPhotoPicker() {        newPhotoPicker.lauch    }    private fun lauchOldPhotoPicker() {        val intent = Intent(Intent.ACTION_GET_CONTENT)        intent.addCategory(Intent.CATEGORY_OPENABLE)        intent.type = "image/*"    }    private var resultLauncher = registerForActivityResult(ActivityResultContracts.StartActivityForResult()){ result ->        if(result.resultCode == Activity.RESULT_OK){            var  uri = result.data!!.data            methodChannelResult.success(uri.toString())        }    }}