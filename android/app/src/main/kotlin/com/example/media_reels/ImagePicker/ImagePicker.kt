package com.example.media_reels.ImagePickerimport android.app.Activityimport android.content.Intentimport android.content.pm.PackageManagerimport android.net.Uriimport android.widget.Toastimport androidx.activity.result.PickVisualMediaRequestimport androidx.activity.result.contract.ActivityResultContractsimport androidx.appcompat.app.AppCompatActivityimport io.flutter.plugin.common.BinaryMessengerimport io.flutter.plugin.common.MethodChannelclass ImagePicker(private val activity: Activity, private val binaryMessenger: BinaryMessenger) :    AppCompatActivity() {    private lateinit var methodChannelResult: MethodChannel.Result    val methodChannel = MethodChannel(binaryMessenger, "iamgePickerPlatform")    val mPermissionHandler = PermissionHandler(activity) ;    override fun onRequestPermissionsResult(        requestCode: Int,        permissions: Array<out String>,        grantResults: IntArray    ) {        super.onRequestPermissionsResult(requestCode, permissions, grantResults)        if (requestCode == 1 && permissions.size == grantResults.size) {            var allPermissionsGranted = true            for (result in grantResults) {                if (result != PackageManager.PERMISSION_GRANTED) {                    allPermissionsGranted = false                    break                }            }            if (!allPermissionsGranted) {                mPermissionHandler.showDialog(permissions, requestCode)            } else {                Toast.makeText(activity, "Permission Granted", Toast.LENGTH_SHORT).show()            }        }    }    init {        methodChannel.setMethodCallHandler { call, result ->            methodChannelResult = result            when (call.method) {                "pickImage" -> {                    if (mPermissionHandler.checkStoragePermission()) {                        // Open image picker when permission is granted                        lauchOldPhotoPicker()                    } else {                        mPermissionHandler.requestPermissions()                    }                }                else -> {                    result.notImplemented()                }            }        }    }    private val newPhotoPicker =        registerForActivityResult(ActivityResultContracts.PickVisualMedia()) { uri: Uri? ->            methodChannelResult.success(uri)        }    private fun lauchNewPhotoPicker() {        newPhotoPicker.launch(PickVisualMediaRequest(ActivityResultContracts.PickVisualMedia.ImageOnly))    }    private fun lauchOldPhotoPicker() {        val intent = Intent(Intent.ACTION_PICK)        intent.setType("image/*")        startActivityForResult(Intent.createChooser(intent, "Select Image"), 1)    }    private var resultLauncher =        registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result ->            if (result.resultCode == Activity.RESULT_OK) {                var uri = result.data!!.data                methodChannelResult.success(uri.toString())            }        }}