package com.example.media_reels.ImagePickerimport android.app.Activityimport android.os.Buildimport android.Manifestimport android.app.AlertDialogimport android.content.Intentimport android.content.pm.PackageManagerimport android.net.Uriimport android.provider.Settingsimport androidx.core.app.ActivityCompatimport androidx.core.content.ContextCompatclass PermissionHandler(private val mActivity: Activity) {    private lateinit var permissions: Array<String>    // Method to check if storage permission is granted    fun checkStoragePermission(): Boolean {        return when {            // Check if the device is running on Android 14 or higher            Build.VERSION.SDK_INT >= Build.VERSION_CODES.UPSIDE_DOWN_CAKE -> {                permissions = arrayOf(                    Manifest.permission.READ_MEDIA_IMAGES,                    Manifest.permission.READ_MEDIA_VIDEO,                    Manifest.permission.READ_MEDIA_AUDIO,                    Manifest.permission.READ_MEDIA_VISUAL_USER_SELECTED                )                // Check permissions granted or not                permissions.all { permission ->                    ContextCompat.checkSelfPermission(mActivity, permission) == PackageManager.PERMISSION_GRANTED                }            }            // Check if the device is running on Android 13 or higher            Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU -> {                permissions = arrayOf(                    Manifest.permission.READ_MEDIA_IMAGES,                    Manifest.permission.READ_MEDIA_VIDEO,                    Manifest.permission.READ_MEDIA_AUDIO,                )                // Check permissions granted or not                permissions.all { permission ->                    ContextCompat.checkSelfPermission(mActivity, permission) == PackageManager.PERMISSION_GRANTED                }            }            // For API 23 to Android 12            Build.VERSION.SDK_INT >= Build.VERSION_CODES.M -> {                permissions = arrayOf(                    Manifest.permission.WRITE_EXTERNAL_STORAGE,                    Manifest.permission.READ_EXTERNAL_STORAGE                )                // Check permissions granted or not                permissions.all { permission ->                    ContextCompat.checkSelfPermission(mActivity, permission) == PackageManager.PERMISSION_GRANTED                }            }            // For SDK < 23            else -> true // Permission is automatically granted on SDK < 23 upon installation        }    }    // Method to request permissions    fun requestPermissions() {        val shouldShowRationale = permissions.any { permission ->            ActivityCompat.shouldShowRequestPermissionRationale(mActivity, permission)        }        if (shouldShowRationale) {            showRationaleDialog(permissions, 1)        } else {            ActivityCompat.requestPermissions(mActivity, permissions, 1)        }    }    // Method for check shouldShowRequestPermissionRationale, otherwise redirects to app settings.    fun showDialog(permissions: Array<out String>, requestCode: Int) {        val shouldShowRationale = permissions.any { permission ->            ActivityCompat.shouldShowRequestPermissionRationale(mActivity, permission)        }        if (shouldShowRationale) {            showRationaleDialog(permissions, requestCode)        } else {            goToSettings()        }    }    // Method for show rationale dialog when permission denied    private fun showRationaleDialog(permissions:  Array<out String>, requestCode: Int) {        AlertDialog.Builder(mActivity).apply {            setTitle("Permission Required")            setCancelable(false)            setMessage("This app needs storage permissions to function properly. Please grant all of them.")            setPositiveButton("OKAY") { _, _ ->                ActivityCompat.requestPermissions(mActivity, permissions, requestCode)            }            setNegativeButton("NO THANKS", null)            show()        }    }    // Method for navigate to app settings    private fun goToSettings() {        AlertDialog.Builder(mActivity).apply {            setTitle("Permission Required")            setCancelable(false)            setMessage("Permission was denied and cannot be asked again. Please allow permission from app settings.")            setPositiveButton("GO TO SETTINGS") { _, _ ->                val intent = Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS).apply {                    data = Uri.fromParts("package", mActivity.packageName, null)                    addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)                }                mActivity.startActivity(intent)            }            setNegativeButton("NO THANKS", null)            show()        }    }}