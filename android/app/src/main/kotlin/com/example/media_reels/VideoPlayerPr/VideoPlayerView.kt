package com.example.media_reels.VideoPlayerPrimport android.app.Activityimport android.content.Contextimport android.util.Logimport android.view.Viewimport android.view.ViewGroupimport android.widget.LinearLayoutimport androidx.core.view.WindowCompatimport androidx.core.view.WindowInsetsCompatimport androidx.core.view.WindowInsetsControllerCompatimport androidx.media3.common.MediaItemimport androidx.media3.common.Playerimport androidx.media3.exoplayer.ExoPlayerimport androidx.media3.ui.PlayerViewimport io.flutter.plugin.common.BinaryMessengerimport io.flutter.plugin.common.MethodChannelimport io.flutter.plugin.platform.PlatformViewinternal class VideoPlayerView(private val context: Context, id: Int, creationParams: Map<*, *>,private val activity: Activity,private  val binaryMessenger: BinaryMessenger): PlatformView {    private val methodChannel: MethodChannel = MethodChannel(binaryMessenger, "actionVideo")    private val linearLayout: LinearLayout = LinearLayout(context)    private var player: ExoPlayer? = null    private  var playerView: PlayerView    private  var playWhenReady = true    private  var currentItem = 0    private  var playbackPosition = 0L    init {        // init setup UI        val layoutParams: ViewGroup.LayoutParams = ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT)        linearLayout.layoutParams = layoutParams        playerView = PlayerView(context)        playerView.layoutParams = layoutParams        linearLayout.addView(playerView)        // init link        setUpPlayer(creationParams?.get("link").toString())        // Set up method channel for communication with Flutter        methodChannel.setMethodCallHandler { call, result ->            when (call.method) {                "play" -> {                    player?.play()                    result.success(null)                }                "pause" -> {                    player?.pause()                    result.success(null)                }                else -> result.notImplemented()            }        }    }    private fun setUpPlayer(url: String) {        if (url.isBlank()) {            // Log an error or handle the case where the URL is missing            Log.e("VideoPlayerView", "Invalid or missing video URL")            return        }        player = ExoPlayer.Builder(context).build().also { exoPlayer ->            playerView.player = exoPlayer            val mediaItem = MediaItem.fromUri(url)            exoPlayer.setMediaItem(mediaItem)            exoPlayer.playWhenReady = playWhenReady            exoPlayer.seekTo(currentItem,playbackPosition)            exoPlayer.prepare()            // Add the listener for isPlaying status            exoPlayer.addListener(object : Player.Listener {                override fun onIsPlayingChanged(isPlaying: Boolean) {                    if (isPlaying) {                        // The player is actively playing                        methodChannel.invokeMethod("videoStatusChanged", "playing")                    } else {                        // The player is paused or buffering                        Log.d("VideoPlayerView", "Player is not playing")                        methodChannel.invokeMethod("videoStatusChanged", "pause")                    }                }            })        }        hideSystemUi()    }    override fun getView(): View {        return linearLayout    }    override fun dispose() {        releasePlayer()    }    private fun hideSystemUi() {        WindowCompat.setDecorFitsSystemWindows(activity.window,false)        WindowInsetsControllerCompat(activity.window,playerView).let { controller ->            controller.hide(WindowInsetsCompat.Type.systemBars())            controller.systemBarsBehavior = WindowInsetsControllerCompat.BEHAVIOR_SHOW_TRANSIENT_BARS_BY_SWIPE        }    }    private fun releasePlayer () {        player?.let { exoPlayer ->            playbackPosition = exoPlayer.currentPosition            currentItem = exoPlayer.currentMediaItemIndex            playWhenReady = exoPlayer.playWhenReady            exoPlayer.release()        }        player = null    }}