package com.example.media_reels.VideoPlayerPrimport android.app.Activityimport android.content.Contextimport android.util.Logimport android.view.Viewimport android.view.ViewGroupimport android.widget.LinearLayoutimport androidx.core.view.WindowCompatimport androidx.core.view.WindowInsetsCompatimport androidx.core.view.WindowInsetsControllerCompatimport androidx.media3.common.PlaybackExceptionimport androidx.media3.common.Playerimport androidx.media3.ui.PlayerViewimport com.example.media_reels.Model.VideoPlayerViewModelimport io.flutter.plugin.common.BinaryMessengerimport io.flutter.plugin.common.MethodChannelimport io.flutter.plugin.platform.PlatformViewinternal class VideoPlayerView(    private val context: Context,    id: Int,    creationParams: Map<*, *>,    private val activity: Activity,    private val binaryMessenger: BinaryMessenger) : PlatformView {    private val methodChannel: MethodChannel = MethodChannel(binaryMessenger, "actionVideo")    private val viewModel = VideoPlayerViewModel(context)    private val linearLayout: LinearLayout = LinearLayout(context)    private var playerView: PlayerView    private val playerListener = object : Player.Listener {        override fun onPlaybackStateChanged(playbackState: Int) {            when (playbackState) {                Player.STATE_BUFFERING -> {                    Log.d("PlayerListener", "Buffering")                }                Player.STATE_READY -> {                    Log.d("PlayerListener", "Ready to play")                }                Player.STATE_ENDED -> {                    Log.d("PlayerListener", "Playback ended")                }                Player.STATE_IDLE -> {                    Log.d("PlayerListener", "Player idle")                }            }        }        override fun onIsPlayingChanged(isPlaying: Boolean) {            if (isPlaying) {                methodChannel.invokeMethod("isPlayingChanged", "isPlaying")                Log.d("PlayerListener", "Playing")            } else {                methodChannel.invokeMethod("isPlayingChanged", "isPause")                Log.d("PlayerListener", "Paused")            }        }        override fun onPlayerError(error: PlaybackException) {            Log.e("PlayerListener", "Player error: ${error.message}")        }    }    init {        // init setup UI        val layoutParams: ViewGroup.LayoutParams = ViewGroup.LayoutParams(            ViewGroup.LayoutParams.MATCH_PARENT,            ViewGroup.LayoutParams.MATCH_PARENT        )        linearLayout.layoutParams = layoutParams        playerView = PlayerView(context)        playerView.layoutParams = layoutParams        linearLayout.addView(playerView)        // Initialize the player with the video URL        val videoUrl = creationParams["link"].toString()        viewModel.initializePlayer(videoUrl)        // Set the player to the PlayerView        playerView.player = viewModel.player        // Listen for player state changes        viewModel.player?.addListener(playerListener)        // Set up the method channel for communication with Flutter        setupMethodChannel()    }    private fun setupMethodChannel() {        methodChannel.setMethodCallHandler { call, result ->            when (call.method) {                "play" -> {                    viewModel.play()                    result.success(null)                }                "pause" -> {                    viewModel.pause()                    result.success(null)                }                "stop" -> {                    viewModel.releasePlayer()                    result.success(null)                }                else -> {                    result.notImplemented()                }            }        }    }    override fun getView(): View {        return linearLayout    }    override fun dispose() {    }        private fun hideSystemUi() {        WindowCompat.setDecorFitsSystemWindows(activity.window,false)         WindowInsetsControllerCompat(activity.window,playerView).let { controller ->             controller.hide(WindowInsetsCompat.Type.systemBars())             controller.systemBarsBehavior = WindowInsetsControllerCompat.BEHAVIOR_SHOW_TRANSIENT_BARS_BY_SWIPE         }     }}